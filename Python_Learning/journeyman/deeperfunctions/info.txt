Functions have 2 types of arguments

Positional and keyword argument

In this example arg1 is positional, arg2 is keyword:

def function_name(arg1, arg2=232)


*****************************************************************************


Callable instances: __call__ method

class Foo:
  def __call__(self):
    print 'called'

foo_instance = Foo()
foo_instance() #this is calling the __call__ method

When foo_instance() is called, it executes the __call__ method defined in the class of the instance.


*****************************************************************************

Callable class: __init__ method

When we call a class, for example:

foo = Foo()

The () mean that the class is called, then the __init__ method is invoked.


*****************************************************************************


Conditionals:

	Conditional statements:
	
	if condition:
		return True
	else:
		return False

	
	Conditional EXPRESSION:
	
	result = True if condition else False


*****************************************************************************


Lambdas


Usable for example for the sorted() function, where we have to pass an iterable argument
and a callable key argument (the method of sorting)

if I have a list of Scientists and I want to sort them in alphabetical order based on their last names:

sorted(scientists, key=lambda name: name.split()[-1]

getting the last name:

last_name = lambda name: name.split()[-1]

last_name("Nikola Tesla")	# = 'Tesla'

Bad for testing, but sometimes very useful, will expand this info later.


*****************************************************************************


Built-in callable() function





*****************************************************************************


Transposing tables:

monday = [20, 22, 24, 22, 21, 21, 21, 20]
tuesday = [21, 23, 26, 25, 24, 24, 23, 21]
.
.
.
for item in zip(monday, tuesday, ...)
	print(item)

Result:
(20, 21, ...)
(22, 23, ...)
(24, 26, ...)
.
.
.








